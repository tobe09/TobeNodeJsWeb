function one() {
    'use strict'
    function Queue() {
        this.arr = [];
        return 5;
    }
    Queue.prototype.enqueue = function (val) {
        var arr = this.arr;
        arr.push(val);
        for (var i = arr.length - 1; i > 0; i--) {
            arr[i] = arr[i - 1];
        }
        arr[0] = val;
    }
    Queue.prototype.dequeue = function () {
        this.arr.pop();
    }
    Queue.prototype.print = function () {
        var arr = this.arr;
        arr.forEach(function (val) {
            console.log(val);
        });
    }

    var queue = new Queue();
    queue.enqueue("ee");
    queue.enqueue(3);
    queue.enqueue("ff");
    queue.dequeue();
    queue.enqueue("gg");
    queue.print();
    var cons = queue.constructor();
    console.log(cons);
    console.log(queue.constructor.prototype);
}

function two() {
    let a = new Object();
    a.aa = 'aa';
    let b = new Object();
    b.constructor.prototype = a;        //wrong
    console.log(b.aa);
    let c = Object.create(a);
    console.log(c.aa);
    let d = {};
    d.__proto__ = a;
    console.log(d.aa);
    console.log();
}

function three() {
    class GetSet {
        constructor(n = '') {
            this.name = n;
        }
        get name() {
            return this._name;
        }
        set name(value) {
            if (value.length < 4) {
                console.log('name is too short');
            }
            else {
                this._name = value
            }
        }
    }

    const gs = new GetSet();
    console.log(gs);
    console.log(gs.name);
    gs.name = 'gs';
    console.log(gs.name);
    gs.name = 'gsname';
    console.log(gs.name);
}

function four() {
    function cccc() {
        this.c = 'c';
    }
    function dddd() {
        this.d = 'd';
    }

    dddd.prototype = new cccc();
    let ddd = new dddd();
    console.log(ddd.c);
    let eee = Object.create(new dddd());
    console.log(eee.d);
}

function five() {
    const Class1 = (function () {
        const name = Symbol('name');

        return class Class1 {
            constructor(n) {
                //this[name] = n;
                this.name = n;
            }

            get name() {
                return this[name];
            }
            set name(value) {
                if (value.length < 3) {
                    console.log("invalid name");
                }
                else {
                    this[name] = value;
                }
            }
        }
    })();

    let cOne = new Class1('n1');
    console.log('1. name= "n1"');
    console.log(cOne.name);
    cOne = new Class1('name1');
    console.log('2. name = "name1"');
    console.log(cOne.name);
    cOne.name = 'n2';
    console.log('3. name = "n2"');
    console.log(cOne.name);
    cOne.name = "name2";
    console.log('4. name="name2"');
    console.log(cOne.name);
    console.log('5. get _name');
    console.log(cOne._name);
    console.log('6. constructor');
    console.log(cOne.constructor);
    console.log('7. constructor.prototype');
    console.log(cOne.constructor.prototype);
    console.log('8. prototype');
    console.log(cOne.prototype);
    console.log('9. __proto__');
    console.log(cOne.__proto__);
    cOne.__proto__ = { a: 'aa' };
    console.log('10. __proto__ as {a: "aa"}');
    console.log(cOne.__proto__);
    console.log('11. field a');
    console.log(cOne.a);
    console.log('12. field name');
    console.log(cOne.name);
    cOne.constructor = { p: "pp" }
    cOne.constructor.prototype = { q: "qq" };
    console.log('13. constructor set as {p: "pp"');
    console.log(cOne.constructor);
    console.log('14. constructor.prototype set as {q: "qq"}');
    console.log(cOne.constructor.prototype);
    console.log('15. field p')
    console.log(cOne.p);
    console.log('16. field q')
    console.log(cOne.q);
}

function voteExploit() {
    const interval = window.setInterval(function () {
        debugger
        vote();
    }, 7000);

    function clearCookies() {
        var cookies = document.cookie.split(";");

        for (var i = 0; i < cookies.length; i++) {
            var cookie = cookies[i];
            var eqPos = cookie.indexOf("=");
            var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
            document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
        }

    }

    function vote() {
        debugger;
        var qSel = document.querySelector('#verifiers');
        qSel.click();
        let count = 0;

        window.setTimeout(function () {
            debugger
            var theValue = document.querySelector('.animated.infinite.fadeOut').innerHTML
            document.querySelectorAll('.w3-input.w3-border.w3-margin-bottom.w3-xlarge')[1].value = theValue
            document.querySelectorAll('.w3-button.w3-block.w3-pink.w3-section.w3-padding')[1].click();
            count++;
            clearCookies();
            debugger
            if (count > 10) {
                debugger
                window.clearInterval(interval);
            }
        }, 2000)

        window.setTimeout(function () {
            debugger
            location.reload()
        }, 5000)
    }
};

function nonDivisibleSubset(k, S) {
    let set = new Set();

    for (let i = 0; i < S.length - 1; i++) {
        const current = S[i];

        for (let j = i + 1; j < S.length; j++) {
            const next = S[j];

            if ((current + next) % 3 !== 0) {
                set = validateSet(current, set);
                set = validateSet(next, set);
            }
        }
    }

    return set.size;
}

function validateSet(value, set) {
    if (set.has(value)) {
        return set;
    }
    else {
        for (let i = 0; i < set.size; i++) {
            const current = set[i];
            if ((value + current) % 3 === 0) {
                return set;
            }
        }
        set.add(value);
    }

    return set;
}
